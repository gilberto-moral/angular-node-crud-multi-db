Criar conexão Angular com banco de Dados MySql (Workbench) - (16/jun/2025)
Criar conexão Angular com banco de Dados Postgres (pdAdmin 4) - (23/jun/2025)
Ambos usando Node.js no backend.

Gemini:
"Como conectar o angular ao meu banco de dados mysql, usado backend node.js e express"
https://gemini.google.com/app/bc3c5feaed6a4ac9

Angular CLI: 20.0.1
Node: 22.16.0
Package Manager: npm 10.9.2
OS: win32 x64

Outra opção simples de criar uma API com Node, SEM ANGULAR:
https://www.youtube.com/watch?v=ycIxWTEI908

Rodar Backend:
> node ./server-mysql.js
ou
> node ./server-postgres.js

Rodar Frontend:
> ng serve -o

LOGIN:
gilberto.moral@gmail.com
admin

giba@gmail.com
131613

BACKEND =>
-------------------------------------------------------------------------------------

1 - Criar o backend:
> mkdir backend
> cd backend
> npm init -y

-------------------------------------------------------------------------------------

2 - Instalar dependências Necessárias (Express + MySql + Postgres):

> cd backend

Express:
-------
> npm install express (cria a pasta node modules)

MySql:
-----
> npm install express mysql2 cors

Postgres:
--------
> npm install pg-promise
Obs.: Tive que alterar as permissões do PowerShell (vide Gemini)

-------------------------------------------------------------------------------------

3 - Criar o Arquivo do Servidor (ex: server.js ou app.js)
> server-mysql.js (na raiz)
> server-postgres.js (na raiz)

-------------------------------------------------------------------------------------

4 - MySql (PhpMyAdmin ou Workbench)
CREATE DATABASE root;
USE root;

PhpMyAdmin: Criar a tabela usuários e depois:

CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE login (
    usuario VARCHAR(50) NOT NULL UNIQUE,
    pass VARCHAR(255) NOT NULL
);

Para Inserir tabela Login:
INSERT INTO login (usuario, pass) VALUES ('gilberto.moral@gmail.com', 'admin');
INSERT INTO login (usuario, pass) VALUES ('giba@gmail.com', '131613');

No Postgres (pgAdmin 4):
-----------------------

CREATE TABLE usuarios (
   id SERIAL PRIMARY KEY,
   nome VARCHAR(255) NOT NULL,
   email VARCHAR(255) UNIQUE NOT NULL,
   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-------------------------------------

// server.js
// Configuração do Banco de Dados MySQL
const dbConfig = {
    host: 'localhost', // Endereço do seu banco de dados
    user: 'root',      // Seu usuário MySQL
    password: '', // Sua senha MySQL (VAZIO no XAMPP - Port 3306)
    database: 'usuarios' // O nome do seu banco de dados
};

-------------------------------------------------------------------------------------

5 - Rodar backend:

MySql:
> node server-mysql.js
ou 
> node ./server-mysql.js

Postgres:
> node server-postgres.js
ou 
> node ./server-postgres.js

http://localhost:3000
http://localhost:3000/api/usuarios

-------------------------------------------------------------------------------------

FRONTEND ANGULAR: =>
-------------------------------------------------------------------------------------

1 - Criar projeto
> ng new frontend --no-standalone --style=scss --routing

-------------------------------------------------------------------------------------

2 - Gerar um Serviço para Comunicação HTTP
> ng generate service services/usuário
> ng generate service services/login --skip-tests

-------------------------------------------------------------------------------------

3 - Font Awesome no projeto:

https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.css

1 Importe o CSS no angular.json:

"styles": [
     "src/styles.css",
     "https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.css"
]

HTML:
<i class="fa fa-coffee"></i>

------------------------------------------------------------------------------------

4 - Criar Home

> ng g c pages/home --skip-tests

------------------------------------------------------------------------------------

5 - Criar Login

> ng g c components/login --skip-tests

------------------------------------------------------------------------------------

6 - Criar envorionment:

> ng g environments

------------------------------------------------------------------------------------

7 - Avatar +  Desloga (Sair) está no gemini:

1 - Backend/Login: Capturar o nome do usuário no login e armazená-lo temporariamente.

2 - Frontend (Serviço de Autenticação): Criar um serviço Angular para gerenciar o estado de login e o nome do usuário.

3 - Frontend (home.component.html): Usar o serviço para exibir o nome e executar a função de deslogar.

> ng g s services/auth --skip-tests=true

------------------------------------------------------------------------------------

8 - Guarda de rotas, que ao clicar em "SAIR" ele desloga, mas se copiar a url ele acessa.
    (Route Guard)

> ng generate guard guards/auth  (Quando perguntado, escolha a opção CanActivate)

------------------------------------------------------------------------------------

9 - GitHub (Arquivo README.MD)

> Abra o terminal na pasta raiz do seu projeto (onde você salvou o novo README.md):


